- Class Methods : 
Let's Imagine We have a record store application and three albums we can add to our record store.
However, we don't have a way to see all of the albums at once.
That’s kind of a problem.
After all, we want to show a list of albums on our home page.
We need a method that will show all of the items on a list, but an instance method isn't a good way to do this.
An instance method is only called on a single instance of an object.
An all() method, on the other hand, involves every instance of the object on the list.
Whenever we need a method that should deal with multiple instances of a class, we should use a class method. Here are a few examples of potential class methods we might want in our record store application:
1 - all(): returns all albums
2 - find(): finds an album by its name
3 - top_rated(): finds the top-rated album
Each of these methods involve access to all albums, not just one.
For instance, the find() methods needs to actually be able to look through all albums to find what it’s looking for, so it shouldn’t be an instance method, either.
The top_rated() method can only determine which album should be top-rated if it can compare all the albums.
To Call these methods we just need to write the code below in the console : 
1 - all() : ClassName.all()
2 - find() : ClassName.find(AlbumName)
3 - top_rated() : ClassName.top_rated()

- Instance Methods : 
For instance methods we can imagine a calculator application ,in here we want to add "stand-alone" methods so they'll end up as instance methods for example we can create :
1 - sum methods like sum()
2 - divide methods like divide() 
3 - to_f() method that converts integer to float for smoother divide operations 
as we can see these methods and operation doesnt need to have acces to the whole class but to only the object it's operating on(instance) 
To Call these methods we do the following for each method : 
1 - sum method : We can instantiate (“order”) a new instance from our Calculator class, and call the method sum on it like so:
calculator = Calculator.new
puts calculator.sum(2, 3)
This will output 5.
or we can just type : ClassName.sum(firstntnumber, secondnumber)
2 - divide Methods : Same as the sum method but you might get some wrong answers(outputs) because dividing one integer number by another returns an integer number. And these aren’t quite great for calculating divisions. for instance :
puts calculator.divide(2, 3) will output 0 thats's why we added the other method number 3 to improve the divide method. 
after editing this method it should look a little bit like this : 
class Calculator

  def divide(number, other)
    number.to_f / other
  end
end
now this method will output correct calculations.
ClassName.divide(firstntnumber, secondnumber)
3 - to_f() method : the method is explain with the divide method above when used in code but if you want to call it on any number we just type as follows :
1.to_f
this will return the float number of 1 .



